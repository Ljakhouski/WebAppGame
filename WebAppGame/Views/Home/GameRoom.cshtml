@model UserDef

<html xmlns="http://www.w3.org/1999/xhtml">

<style>
    *, *::after, *::before {
        box-sizing: border-box;
    }

    :root {
        --cell-size: 100px;
        --mark-size: calc(var(--cell-size) * .9);
    }

    body {
        margin: 0;
    }

    .board {
        height: 100vh;
        display: grid;
        justify-content: center;
        align-content: center;
        justify-items: center;
        align-items: center;
        grid-template-columns: repeat(3, auto)
    }

    .cell {
        width: var(--cell-size);
        height: var(--cell-size);
        border: 1px solid black;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        cursor: pointer;
    }

        .cell:first-child,
        .cell:nth-child(2),
        .cell:nth-child(3) {
            border-top: none;
        }

        .cell:nth-child(3n + 1) {
            border-left: none;
        }

        .cell:nth-child(3n + 3) {
            border-right: none;
        }

        .cell:last-child,
        .cell:nth-child(8),
        .cell:nth-child(7) {
            border-bottom: none;
        }

        .cell.x,
        .cell.circle {
            cursor: not-allowed;
        }

            .cell.x::before,
            .cell.x::after,
            .cell.circle::before {
                background-color: black;
            }

    .board.x .cell:not(.x):not(.circle):hover::before,
    .board.x .cell:not(.x):not(.circle):hover::after,
    .board.circle .cell:not(.x):not(.circle):hover::before {
        background-color: lightgrey;
    }

    .cell.x::before,
    .cell.x::after,
    .board.x .cell:not(.x):not(.circle):hover::before,
    .board.x .cell:not(.x):not(.circle):hover::after {
        content: '';
        position: absolute;
        width: calc(var(--mark-size) * .15);
        height: var(--mark-size);
    }

    .cell.x::before,
    .board.x .cell:not(.x):not(.circle):hover::before {
        transform: rotate(45deg);
    }

    .cell.x::after,
    .board.x .cell:not(.x):not(.circle):hover::after {
        transform: rotate(-45deg);
    }

    .cell.circle::before,
    .cell.circle::after,
    .board.circle .cell:not(.x):not(.circle):hover::before,
    .board.circle .cell:not(.x):not(.circle):hover::after {
        content: '';
        position: absolute;
        border-radius: 50%;
    }

    .cell.circle::before,
    .board.circle .cell:not(.x):not(.circle):hover::before {
        width: var(--mark-size);
        height: var(--mark-size);
    }

    .cell.circle::after,
    .board.circle .cell:not(.x):not(.circle):hover::after {
        width: calc(var(--mark-size) * .7);
        height: calc(var(--mark-size) * .7);
        background-color: white;
    }
    .fakescreen {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0);
        justify-content: center;
        align-items: center;
        color: white;
        flex-direction: column;
    }
    .winning-message {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.9);
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 5rem;
        flex-direction: column;
    }

    .winning-message button {
        font-size: 3rem;
        background-color: white;
        border: 1px solid black;
        padding: .25em .5em;
        cursor: pointer;
    }
    
    .winning-message button:hover {
        background-color: black;
        color: white;
        border-color: white;
    }
    
    .winning-message.show {
        display: flex;
    }

    .fakescreen.show 
    {
        display: flex;
    }
</style>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="style.css">
    <script src="logic.js" defer></script>
    <title>Document</title>
</head>
<body>
    <div class="main_area">
        <div class="board" id="board">
            <div class="cell" data-cell id="c0"></div>
            <div class="cell" data-cell id="c1"></div>
            <div class="cell" data-cell id="c2"></div>
            <div class="cell" data-cell id="c3"></div>
            <div class="cell" data-cell id="c4"></div>
            <div class="cell" data-cell id="c5"></div>
            <div class="cell" data-cell id="c6"></div>
            <div class="cell" data-cell id="c7"></div>
            <div class="cell" data-cell id="c8"></div>
        </div>
    </div>
    <div class="winning-message" id="winningMessage">
        <div data-winning-message-text></div>
        <button id="restartButton">Restart</button>
    </div>

    <div class="fakescreen" id="f_screen">  </div>
</body>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    debugger;

    @{
        var enemy = $"\"{Model.EnemyName}\"";
        var myName = $"\"{Model.MyName}\"";
    }


    class ReceiveModel
    {
        cell = "";
        from = "";
        to = "";

        isRestartEvent = false;

        constructor() {}
    }

    "use strict";
   
    var connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();

    //get
    connection.on("ReceiveJson", function (from, to, jsonMessage) {

        if (to == @Html.Raw(myName)) {
            let obj = JSON.parse(jsonMessage);
            enemyClick(document.getElementById(obj.cell), obj.isX)
        }
    });

    connection.on("RestartEvent", function (from, to) {

        if (to == @Html.Raw(myName)) {
            startGame();
        }
    });

    connection.start().then(function () {
    });

    //send
    /*connection.invoke("SendJson", from, to, message).catch(function (err) {
        return console.error(err.toString());
    });*/

    /*
    function (event) {
        var user = document.getElementById("userInput").value;
        var message = document.getElementById("messageInput").value;
        connection.invoke("SendMessage", user, message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    }*/


    /****************************************************************** */
    const X_CLASS = 'x'
    const CIRCLE_CLASS = 'circle'
    const WINNING_COMBINATIONS = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
    ]
    const cellElements = document.querySelectorAll('[data-cell]')
    const board = document.getElementById('board')
    const winningMessageElement = document.getElementById('winningMessage')
    const f_screen = document.getElementById('f_screen')
    const restartButton = document.getElementById('restartButton')
    const winningMessageTextElement = document.querySelector('[data-winning-message-text]')
    let circleTurn
    let my_mode_is_X_mode = true;

    startGame()

    restartButton.addEventListener('click', restartGame)

    function restartGame()
    {
        connection.invoke("Restart", @Html.Raw(myName), @Html.Raw(enemy)).catch(function (err) {
            return console.error(err.toString());
        });
        startGame()
    }
    function startGame() {
        unblockArea();
        winningMessageElement.classList.remove('show')

        my_mode_is_X_mode = true;
        circleTurn = !my_mode_is_X_mode;

        cellElements.forEach(cell => {
            cell.classList.remove(X_CLASS)
            cell.classList.remove(CIRCLE_CLASS)
            cell.removeEventListener('click', myClick)
            cell.addEventListener('click', myClick, { once: true })
        })
        setBoardHoverClass()
        winningMessageElement.classList.remove('show')
        //f_screen.classList.remove('show')
    }
    function enemyClick(cell) {

        if (isEmptyMap())
        {
            my_mode_is_X_mode = false;
            circleTurn = true;
        }
        

        // const cell = e.target
        const currentClass = my_mode_is_X_mode ? CIRCLE_CLASS : X_CLASS

        placeMark(cell, currentClass)
        if (checkWin(currentClass)) {
            endGame(false)
        } else if (isDraw()) {
            endGame(true)
        } else {
            swapTurns()
            setBoardHoverClass()
        }

        unblockArea();
        circleTurn = !my_mode_is_X_mode
    }
    function myClick(e) {
        blockArea();
        if (isEmptyMap())
        {
            my_mode_is_X_mode = true;
        }
        const cell = e.target
        
       // const cell = e.target
        const currentClass = my_mode_is_X_mode ? X_CLASS : CIRCLE_CLASS
        placeMark(cell, currentClass)
        if (checkWin(currentClass)) {
            endGame(false)
        } else if (isDraw()) {
            endGame(true)
        } else {
            swapTurns()
            setBoardHoverClass()
        }

        let m = new ReceiveModel();
        m.from = @Html.Raw(myName);
        m.to = @Html.Raw(enemy);
        m.cell = cell.id;

        jsonMessage = JSON.stringify(m);

        connection.invoke("SendJson", @Html.Raw(myName), @Html.Raw(enemy), jsonMessage).catch(function (err) {
            return console.error(err.toString());
        });

        
    }

    function endGame(draw) {
        
        if (draw) {
            winningMessageTextElement.innerText = 'Draw!'
        } else {
            winningMessageTextElement.innerText = `${circleTurn ? "O's" : "X's"} Wins!`
        }
        winningMessageElement.classList.add('show')
        unblockArea();
    }

    function isEmptyMap()
    {
        for (let i = 0; i<9; i++)
        {
            const o = document.getElementById("c"+i);

            if (o.classList.contains(X_CLASS) || o.classList.contains(CIRCLE_CLASS))
                return false;
        }

        return true;
    }

    function isFullMap()
    {        
        for (let i = 0; i < 9; i++) {
            const o = document.getElementById("c" + i);

            if (o.classList.contains(X_CLASS) || o.classList.contains(CIRCLE_CLASS))
                continue;
            else
                return false;;
        }

        return true;       
    }

    function isDraw() {
        return [...cellElements].every(cell => {
            return cell.classList.contains(X_CLASS) || cell.classList.contains(CIRCLE_CLASS)
        })
    }

    function placeMark(cell, currentClass) {
        cell.classList.add(currentClass)
    }

    function swapTurns() {
        circleTurn = !circleTurn
    }

    function setBoardHoverClass() {
        /*board.classList.remove(X_CLASS)
        board.classList.remove(CIRCLE_CLASS)
        if (circleTurn) {
            board.classList.add(CIRCLE_CLASS)
        } else {
            board.classList.add(X_CLASS)
        }*/

        board.classList.remove(X_CLASS)
        board.classList.remove(CIRCLE_CLASS)
        if (!my_mode_is_X_mode) {
            board.classList.add(CIRCLE_CLASS)
        } else {
            board.classList.add(X_CLASS)
        }
    }

    function checkWin(currentClass) {
        return WINNING_COMBINATIONS.some(combination => {
            return combination.every(index => {
                return cellElements[index].classList.contains(currentClass)
            })
        })
    }

    /*var div_id = document.getElementById('div_id');

    div_id.style.pointerEvents='auto'; //on click
    div_id.style.pointerEvents='none'; //off click*/

    function blockArea() {
        //winningMessageElement.classList.add('show')
        //alert("block");
        var area = document.getElementById('f_screen');
        area.classList.add('show')
        //div_id.style.pointerEvents = 'none';
    }

    function unblockArea() {
        //winningMessageElement.classList.remove('show')
        //alert("unblock");
        var area = document.getElementById('f_screen');

        //div_id.style.pointerEvents = 'auto'; 
        area.classList.remove('show')
    }
</script>
</html>